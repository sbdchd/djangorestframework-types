from collections.abc import Iterable, Mapping, Sequence
from typing import (
    Any,
    Protocol,
    TypeVar,
)

from django.db.models import Model, QuerySet
from rest_framework.request import Request
from rest_framework.views import APIView

_MT = TypeVar("_MT", bound=Model)
_Q = TypeVar("_Q", bound=QuerySet[Any])

class _FilterBackendProtocol(Protocol):
    def filter_queryset(self, request: Any, queryset: _Q, view: APIView) -> _Q: ...

class BaseFilterBackend:
    def filter_queryset(self, request: Any, queryset: _Q, view: APIView) -> _Q: ...
    def get_schema_fields(self, view: APIView) -> list[Any]: ...
    def get_schema_operation_parameters(self, view: APIView) -> Any: ...

class SearchFilter(BaseFilterBackend):
    search_param: str = ...
    template: str = ...
    lookup_prefixes: dict[str, str] = ...
    search_title: str = ...
    search_description: str = ...
    def get_search_fields(self, view: APIView, request: Request) -> Any: ...
    def get_search_terms(self, request: Request) -> list[str]: ...
    def construct_search(self, field_name: str) -> str: ...
    def must_call_distinct(self, queryset: QuerySet[Any], search_fields: Any) -> bool: ...
    def to_html(self, request: Request, queryset: QuerySet[Any], view: APIView) -> str: ...

class OrderingFilter(BaseFilterBackend):
    ordering_param: str = ...
    ordering_fields: Sequence[str] | None = ...
    ordering_title: str = ...
    ordering_description: str = ...
    template: str = ...
    def get_ordering(self, request: Request, queryset: QuerySet[Any], view: APIView) -> Sequence[str]: ...
    def get_default_ordering(self, view: APIView) -> Sequence[str]: ...
    def get_default_valid_fields(
        self, queryset: QuerySet[Any], view: Any, context: Mapping[str, Any] = ...
    ) -> list[tuple[str, str]]: ...
    def get_valid_fields(
        self, queryset: QuerySet[Any], view: Any, context: Mapping[str, Any] = ...
    ) -> list[tuple[str, str]]: ...
    def remove_invalid_fields(
        self, queryset: QuerySet[Any], fields: Iterable[str], view: Any, request: Request
    ) -> list[str]: ...
    def get_template_context(self, request: Request, queryset: QuerySet[Any], view: APIView) -> dict[str, Any]: ...
    def to_html(self, request: Request, queryset: QuerySet[Any], view: APIView) -> str: ...
